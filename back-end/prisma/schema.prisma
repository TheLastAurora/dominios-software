// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  nome      String     @db.VarChar(120)
  login     String     @unique @db.VarChar(20)
  senha     String     @db.VarChar(60)
  gabarito  Gabarito[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("tb_user")
}

model Concurso {
  id          Int                 @id @default(autoincrement())
  nome        String              @db.VarChar(120)
  cargo       String              @db.VarChar(255)
  vagas_ac    Int
  vagas_pd    Int
  gabarito    Gabarito[]
  candidatos  CandidatoConcurso[]
  homologacao DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("tb_concurso")
}

model Candidato {
  id              Int                 @id @default(autoincrement())
  nome            String              @db.VarChar(120)
  rg              String              @unique @db.VarChar(15)
  cpf             String              @unique @db.VarChar(8)
  genero          Gender
  nome_mae        String              @db.VarChar(120)
  nome_pai        String              @db.VarChar(120)
  data_nascimento DateTime
  data_expedicao  DateTime
  logradouro      String              @db.VarChar(40)
  numero          String              @db.VarChar(8)
  complemento     String              @db.VarChar(120)
  bairro          String              @db.VarChar(80)
  cep             String              @db.VarChar(12)
  cod_municipio   String              @db.VarChar(12)
  uf              UF
  email           String              @unique @db.VarChar(40)
  telefone        String              @db.VarChar(15)
  concurso        CandidatoConcurso[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("tb_candidato")
}

model Gabarito {
  id         Int      @id @default(autoincrement())
  concursoId Int
  concurso   Concurso @relation(fields: [concursoId], references: [id], onDelete: Cascade)
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  tipo       String   @db.Char(1)
  respostas  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tb_gabarito")
}

model CandidatoConcurso {
  id          Int       @id @default(autoincrement())
  candidatoID Int
  candidato   Candidato @relation(fields: [candidatoID], references: [id], onDelete: Cascade)
  concursoID  Int
  concurso    Concurso  @relation(fields: [concursoID], references: [id], onDelete: Cascade)
  nota        Int
  tipo        String    @db.Char(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tb_candidato_concurso")
}

enum Gender {
  M
  F
}

enum UF {
  AM
  AL
  AC
  AP
  BA
  PA
  MT
  MG
  MS
  GO
  MA
  RS
  TO
  PI
  SP
  RO
  RR
  PR
  CE
  PE
  SC
  PB
  RN
  ES
  RJ
  SE
  DF
}
